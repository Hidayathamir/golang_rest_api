// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	dto "github.com/Hidayathamir/golang_rest_api/entity/dto"
	mock "github.com/stretchr/testify/mock"

	repository "github.com/Hidayathamir/golang_rest_api/repository"
)

// IProductUsecase is an autogenerated mock type for the IProductUsecase type
type IProductUsecase struct {
	mock.Mock
}

// AddProduct provides a mock function with given fields: productInput
func (_m *IProductUsecase) AddProduct(productInput dto.AddProductRequest) (dto.AddProductResponse, error) {
	ret := _m.Called(productInput)

	var r0 dto.AddProductResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.AddProductRequest) (dto.AddProductResponse, error)); ok {
		return rf(productInput)
	}
	if rf, ok := ret.Get(0).(func(dto.AddProductRequest) dto.AddProductResponse); ok {
		r0 = rf(productInput)
	} else {
		r0 = ret.Get(0).(dto.AddProductResponse)
	}

	if rf, ok := ret.Get(1).(func(dto.AddProductRequest) error); ok {
		r1 = rf(productInput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProducts provides a mock function with given fields: queryParam
func (_m *IProductUsecase) GetProducts(queryParam repository.GetProductsQueryParam) ([]dto.GetProductResponse, error) {
	ret := _m.Called(queryParam)

	var r0 []dto.GetProductResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(repository.GetProductsQueryParam) ([]dto.GetProductResponse, error)); ok {
		return rf(queryParam)
	}
	if rf, ok := ret.Get(0).(func(repository.GetProductsQueryParam) []dto.GetProductResponse); ok {
		r0 = rf(queryParam)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.GetProductResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(repository.GetProductsQueryParam) error); ok {
		r1 = rf(queryParam)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIProductUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewIProductUsecase creates a new instance of IProductUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIProductUsecase(t mockConstructorTestingTNewIProductUsecase) *IProductUsecase {
	mock := &IProductUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
